
import java.awt.Desktop;
import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;
import javafx.scene.paint.Color;
import javax.swing.JOptionPane;
import javax.swing.table.AbstractTableModel;


public class viewOffline extends javax.swing.JFrame {

    ArrayList<recipe> al = new ArrayList<>();
    myTableModel mt = new myTableModel();

    public viewOffline() {
        getContentPane().setBackground(java.awt.Color.PINK);
        initComponents();
        setVisible(true);
        int h = Toolkit.getDefaultToolkit().getScreenSize().height;
        int w = Toolkit.getDefaultToolkit().getScreenSize().width;
        this.setSize(w, h);
        mt = new myTableModel();
        offline_jtable.setModel(mt);
        offline_jtable.setSize(w-200, 600);
        setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        try {

            FileInputStream fis = new FileInputStream("offline.txt");
            BufferedReader br = new BufferedReader(new InputStreamReader(fis));

            String s1 = "";
            while (true) {
                String s = br.readLine();
                if (s == null) {
                    break;
                }
                s1 = s1 + s;
            }
            fis.close();

            StringTokenizer st = new StringTokenizer(s1, ";");
            while (st.hasMoreTokens()) {
                String sub = st.nextToken();
                StringTokenizer st1 = new StringTokenizer(sub, "~");
                String recipe_id = st1.nextToken();
                String title = st1.nextToken();

                al.add(new recipe(recipe_id, title));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        lb_offline = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        offline_jtable = new javax.swing.JTable();
        bt_viewrecipe = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(null);

        lb_offline.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        lb_offline.setForeground(new java.awt.Color(204, 51, 0));
        lb_offline.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lb_offline.setText("View Offline");
        getContentPane().add(lb_offline);
        lb_offline.setBounds(10, 10, 400, 50);


        offline_jtable.setModel(new javax.swing.table.DefaultTableModel(
                new Object[][]{
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null},
                    {null, null, null, null}
                },
                new String[]{
                    "Title 1", "Title 2", "Title 3", "Title 4"
                }
        ));
        jScrollPane1.setViewportView(offline_jtable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 70, 510, 300);

        bt_viewrecipe.setText("View Recipe");
        bt_viewrecipe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bt_viewrecipeActionPerformed(evt);
            }
        });
        getContentPane().add(bt_viewrecipe);
        bt_viewrecipe.setBounds(700, 100, 120, 60);

        pack();
    }// </editor-fold>                        

    private void bt_viewrecipeActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        int index = offline_jtable.getSelectedRow();
        if (index == -1) {
            JOptionPane.showMessageDialog(this, "Please Selected Atleast One Recipe");
        } else {
            try {

                String recipe_id = al.get(index).rID;
                File f = new File("Offline" + File.separator + recipe_id + ".html");
                Desktop.getDesktop().open(f);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewOffline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewOffline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewOffline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewOffline.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewOffline().setVisible(true);
            }
        });
    }

    class myTableModel extends AbstractTableModel {

        String title[]
                = {
                    "Sr.no", "Recipe"
                };

        @Override
        public String getColumnName(int ind) {
            return title[ind];
        }

        @Override
        public int getRowCount() {
            return al.size();
        }

        @Override
        public int getColumnCount() {
            return title.length;
        }

        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (columnIndex == 0) {
                return rowIndex + 1;
            } else {
                return al.get(rowIndex).title;
            }
        }

    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton bt_viewrecipe;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lb_offline;
    private javax.swing.JTable offline_jtable;
    // End of variables declaration                   

}
