
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.io.Writer;
import java.net.URI;
import java.net.URL;
import java.net.URLConnection;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import java.net.MalformedURLException;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author vasu
 */
public class recipeDetail extends javax.swing.JFrame {

    String title;
    String image_url;
    String recipe_id;
    int h = Toolkit.getDefaultToolkit().getScreenSize().height;
    int w = Toolkit.getDefaultToolkit().getScreenSize().width;
    String source_url;
    String ingredients = "";
    String procedure;

    /**
     * Creates new form recipeDetail
     *
     * @param title
     * @param imageUrl
     * @param rID
     */
    public recipeDetail(String title, String imageUrl, String rID) {
        initComponents();
        this.image_url = imageUrl;
        this.recipe_id = rID;
        this.title = title;
        data_panel.setSize(w, 300);
        getContentPane().setBackground(java.awt.Color.PINK);
        ingredient_mainPanel.setSize(w, 500);
        
        procedure_mainPanel.setSize(w, 500);
        detail_title.setText("<html>" + this.title + "<html>");
        try {
            URL detail_img_url = new URL(this.image_url);
            URLConnection conn2 = detail_img_url.openConnection();
            conn2.setRequestProperty("User-Agent", "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.249.0 Safari/532.5");
            BufferedImage img = ImageIO.read(conn2.getInputStream());
            BufferedImage tempJPG = resize(img, 177, 88);
            detail_icon.setIcon(new ImageIcon(tempJPG));
            setSize(w, h);
            fetch_detail job = new fetch_detail();
            Thread t = new Thread(job);
            t.start();
            File f = new File("Favourite.txt");
            if (f.exists()) {
                FileInputStream fis = new FileInputStream("Favourite.txt");
                BufferedReader br = new BufferedReader(new InputStreamReader(fis));

                String s = "";
                while (true) {
                    String s1 = br.readLine();
                    if (s1 == null) {
                        break;
                    }
                    s += s1;

                }
                if (s.contains("~" + recipe_id + "~")) {
                    addToFavouriteGrey.setVisible(false);
                    addToFavouriteRed.setVisible(true);
                } else {
                    addToFavouriteGrey.setVisible(true);
                    addToFavouriteRed.setVisible(false);
                }
                fis.close();
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public BufferedImage resize(BufferedImage image, int width, int height) {
        BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
        Graphics2D g2d = (Graphics2D) bi.createGraphics();
        g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
        g2d.drawImage(image, 0, 0, width, height, null);
        g2d.dispose();
//        System.out.println(bi);
        return bi;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        detail_panel = new javax.swing.JPanel();
        detail_icon = new javax.swing.JLabel();
        detail_title = new javax.swing.JLabel();
        addToFavouriteGrey = new javax.swing.JButton();
        addToFavouriteRed = new javax.swing.JButton();
        offlineButton = new javax.swing.JButton();
        notSavedOffline = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        ingredient_mainPanel = new javax.swing.JPanel();
        ingredient_title = new javax.swing.JLabel();
        ingredient_scrollpane = new javax.swing.JScrollPane();
        data_panel = new javax.swing.JPanel();
        procedure_mainPanel = new javax.swing.JPanel();
        instructionTitle = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        instructions_editor = new javax.swing.JEditorPane();
        openBrowser = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 204));
        getContentPane().setLayout(null);

        detail_panel.setBackground(new java.awt.Color(255, 255, 204));
        detail_panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        detail_panel.setToolTipText("");
        detail_panel.setLayout(null);
        detail_panel.add(detail_icon);
        detail_icon.setBounds(7, 7, 177, 88);

        detail_title.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        detail_title.setForeground(new java.awt.Color(204, 51, 0));
        detail_panel.add(detail_title);
        detail_title.setBounds(200, 40, 290, 31);

        addToFavouriteGrey.setIcon(new javax.swing.ImageIcon(getClass().getResource("/grey.png"))); // NOI18N
        addToFavouriteGrey.setText("Add to favourites");
        addToFavouriteGrey.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToFavouriteGreyActionPerformed(evt);
            }
        });
        detail_panel.add(addToFavouriteGrey);
        addToFavouriteGrey.setBounds(200, 80, 170, 40);

        addToFavouriteRed.setIcon(new javax.swing.ImageIcon(getClass().getResource("/red1.png"))); // NOI18N
        addToFavouriteRed.setText("Add to favourites");
        addToFavouriteRed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToFavouriteRedActionPerformed(evt);
            }
        });
        detail_panel.add(addToFavouriteRed);
        addToFavouriteRed.setBounds(200, 90, 170, 29);

        offlineButton.setText("Save Offline");
        offlineButton.setEnabled(false);
        offlineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offlineButtonActionPerformed(evt);
            }
        });
        detail_panel.add(offlineButton);
        offlineButton.setBounds(540, 80, 160, 40);

        notSavedOffline.setBackground(new java.awt.Color(255, 255, 255));
        notSavedOffline.setFont(new java.awt.Font("Lucida Grande", 2, 14)); // NOI18N
        notSavedOffline.setForeground(new java.awt.Color(153, 0, 153));
        detail_panel.add(notSavedOffline);
        notSavedOffline.setBounds(520, 40, 200, 30);

        jButton1.setText("Watch Videos");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        detail_panel.add(jButton1);
        jButton1.setBounds(380, 80, 150, 40);

        getContentPane().add(detail_panel);
        detail_panel.setBounds(0, 0, 1350, 140);

        ingredient_mainPanel.setBackground(new java.awt.Color(255, 255, 204));
        ingredient_mainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        ingredient_mainPanel.setLayout(null);

        ingredient_title.setText("Ingredients");
        ingredient_mainPanel.add(ingredient_title);
        ingredient_title.setBounds(30, 20, 490, 20);

        data_panel.setLayout(null);
        ingredient_scrollpane.setViewportView(data_panel);

        ingredient_mainPanel.add(ingredient_scrollpane);
        ingredient_scrollpane.setBounds(10, 50, 1210, 110);

        getContentPane().add(ingredient_mainPanel);
        ingredient_mainPanel.setBounds(0, 180, 1230, 170);

        procedure_mainPanel.setBackground(new java.awt.Color(255, 255, 204));
        procedure_mainPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        procedure_mainPanel.setLayout(null);

        instructionTitle.setText("Instructions");
        procedure_mainPanel.add(instructionTitle);
        instructionTitle.setBounds(30, 10, 490, 20);

        instructions_editor.setContentType("text/html");
        instructions_editor.setSize(new java.awt.Dimension(100, 40));
        jScrollPane1.setViewportView(instructions_editor);

        procedure_mainPanel.add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 1230, 130);

        openBrowser.setText("Look Up");
        openBrowser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBrowserActionPerformed(evt);
            }
        });
        procedure_mainPanel.add(openBrowser);
        openBrowser.setBounds(880, 10, 100, 29);

        getContentPane().add(procedure_mainPanel);
        procedure_mainPanel.setBounds(0, 380, 1240, 270);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openBrowserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBrowserActionPerformed
        // TODO add your handling code here:
        try {
            Desktop.getDesktop().browse(new URI(this.source_url));
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_openBrowserActionPerformed

    private void addToFavouriteRedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToFavouriteRedActionPerformed
        // TODO add your handling code here:
        try {
            FileInputStream fis = new FileInputStream("Favourite.txt");
            BufferedReader br = new BufferedReader(new InputStreamReader(fis));

            FileOutputStream fos = new FileOutputStream("temp.txt");
            PrintWriter pw = new PrintWriter(fos);

            while (true) {
                String s = br.readLine();
                if (s == null) {
                    break;
                } else if (s.contains("~" + recipe_id + "~")) {
                    //skips the item
                } else {
                    pw.println(s);
                }
            }
            pw.flush();
            fis.close();
            fos.close();

            File f = new File("Favourite.txt");
            f.delete();
            File f1 = new File("temp.txt");
            File f2 = new File("Favourite.txt");
            f1.renameTo(f2);
            addToFavouriteGrey.setVisible(true);
            addToFavouriteRed.setVisible(false);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_addToFavouriteRedActionPerformed

    private void addToFavouriteGreyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToFavouriteGreyActionPerformed
        // TODO add your handling code here:
        try {
            FileOutputStream fos = new FileOutputStream("Favourite.txt", true);
            PrintWriter pw = new PrintWriter(fos);

            pw.println("~" + recipe_id + "~" + title + "~" + image_url + ";");
            pw.flush();
            fos.close();
        } catch (Exception e) {
            e.printStackTrace();
        }

        addToFavouriteGrey.setVisible(false);
        addToFavouriteRed.setVisible(true);
    }//GEN-LAST:event_addToFavouriteGreyActionPerformed

    private void offlineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offlineButtonActionPerformed
        // TODO add your handling code here:
        try {
            if (procedure.equals("Not Available")) {
                JOptionPane.showMessageDialog(this, "This Recipe Can't be Downloaded");
            } else {

                File f = new File("Offline");
                if (!f.exists()) {
                    f.mkdir();
                }

                int Flag = 0;
                File f2[] = f.listFiles();
                for (int i = 0; i < f2.length; i++) {
                    if (f2[i].getName().equals(recipe_id + ".html")) {
                        int ans = JOptionPane.showConfirmDialog(this, "Already exists. Resave?");
                        if (ans == JOptionPane.YES_OPTION) {
                            Flag = 1;
                            break;
                        } else {
                            Flag = 2;
                            break;
                        }
                    }
                }
                if (Flag == 0 || Flag == 1) {
                    String code = generate_offline_page(ingredients, procedure, title);
                    FileOutputStream fos = new FileOutputStream(f + "//" + recipe_id + ".html");
                    PrintWriter pw = new PrintWriter(fos);
                    pw.println(code);
                    pw.flush();
                    fos.close();
                    URL urlimg3 = new URL(image_url);
                    URLConnection urlcon4 = urlimg3.openConnection();
                    urlcon4.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36");
                    InputStream is = urlcon4.getInputStream();
                    FileOutputStream fos2 = new FileOutputStream(f + "//" + recipe_id + ".jpg");
                    byte b[] = new byte[10000];
                    while (true) {
                        int r = is.read(b, 0, 1000);
                        if (r == -1) {
                            break;
                        }
                        fos2.write(b, 0, r);
                    }
                    fos2.close();

                    if (Flag == 0) {
                        FileOutputStream fos3 = new FileOutputStream("offline.txt", true);
                        PrintWriter pw3 = new PrintWriter(fos3);
                        pw3.println("~" + recipe_id + "~" + title + ";");
                        pw3.flush();
                        pw3.close();
                        fos3.close();

                    }
                    JOptionPane.showMessageDialog(this, "File Saved Successfully");
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }//GEN-LAST:event_offlineButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        YoutubeSearch ob = new YoutubeSearch(this.title);
    }//GEN-LAST:event_jButton1ActionPerformed
    String generate_offline_page(String ing, String procedure1, String title) {
        String offline = "<html>\n"
                + "    <head>\n"
                + "        <title>" + title + "</title>\n"
                + "      \n"
                + "    </head>\n"
                + "    <body style=\"background: #ccccff\">\n"
                + "        \n"
                + "        <div style=\"border: solid 1px black; border-radius: 5px;background: white; padding: 20px \">\n"
                + "            <img src=\"" + recipe_id + ".jpg\" width=\"100\" height=\"100\" />\n"
                + "            \n"
                + "            <label style=\"font-style: italic; font-size: 25px; position: relative; top: -50px;left: 50px\"><b>" + title + "</b></label>\n"
                + "            \n"
                + "        </div>\n"
                + "        \n"
                + "        <div style=\"border: solid 1px black; border-radius: 5px;background: white; padding: 20px; margin-top: 10px \">\n"
                + "            <label style=\"font-size: 25px; \">Ingredients</label><br>\n" + ing
                + "                       \n"
                + "        </div>\n"
                + "        \n"
                + "        <div style=\"border: solid 1px black; border-radius: 5px;background: white; padding: 20px; margin-top: 10px \">\n"
                + "            <label style=\"font-size: 25px; \">Procedure</label><br>\n" + procedure1
                + "                   \n"
                + "        </div>\n"
                + "        \n"
                + "        \n"
                + "    </body>\n"
                + "</html>\n"
                + "";

        return offline;
    }

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(recipeDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(recipeDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(recipeDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(recipeDetail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//
//            }
//        });
//    }
    class fetch_detail implements Runnable {

        @Override
        public void run() {
            try {
                String id = recipe_id;
                URL url = new URL("http://food2fork.com/api/get?key=" + credentials.API_KEY + "&rId=" + id);
                URLConnection conn = url.openConnection();
                conn.setRequestProperty("User-Agent", "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.249.0 Safari/532.5");
                BufferedReader br = new BufferedReader(
                        new InputStreamReader(conn.getInputStream()));
                JSONParser jsonParser = new JSONParser();

                JSONObject jsonObject = (JSONObject) jsonParser.parse(br.readLine());//Full Search Object

                JSONObject recipe = (JSONObject) jsonObject.get("recipe");
                source_url = (String) recipe.get("source_url");
                JSONArray ingredientsArray = (JSONArray) recipe.get("ingredients");
//        System.out.println(count);
                JLabel[] ingredLabel = new JLabel[(int) ingredientsArray.size()];
                data_panel.setPreferredSize(new Dimension(600, 5000));
                int y = 10;
                for (int i = 0; i < ingredLabel.length; i++) {
                    ingredLabel[i] = new JLabel();
                    ingredLabel[i].setBounds(10, y, 600, 10);
                    ingredLabel[i].setText((String) ingredientsArray.get(i));

                    ingredients += (String) ingredientsArray.get(i) + "<br>";//string for offline pages

                    data_panel.add(ingredLabel[i]);
                    data_panel.repaint();
                    y += 20;
                }

                setSize(w + 1, h + 1);
                setSize(w, h);

                br.close();
                procedure = fetch_description(source_url);
//        System.out.println(procedure);
//        if(procedure.equals("Not available"))
//            openBrowser.setVisible(false);
                instructions_editor.setText(procedure);
                offlineButton.setEnabled(true);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    public String fetch_description(String source_url) {
        try {
            URL url = new URL(source_url);
            URLConnection urlcon = url.openConnection();
            urlcon.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36");
            InputStream stream = urlcon.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(stream));
            String procedure = "";
            while (true) {
                String s = br.readLine();
                if (s == null) {
                    break;
                }
                procedure = procedure + s;
            }
            int index = procedure.indexOf("<h4 class=\"panel-title\">Instructions</h4>");
            if (index == -1) {
                procedure = "Not Available";
                openBrowser.setVisible(true);
            } else {
                openBrowser.setVisible(false);
                int start = procedure.indexOf("<div class=\"panel-body\">", index);
                int end = procedure.indexOf("</div>", start);
                procedure = procedure.substring(start, end + 6);

            }
            return procedure;
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToFavouriteGrey;
    private javax.swing.JButton addToFavouriteRed;
    private javax.swing.JPanel data_panel;
    private javax.swing.JLabel detail_icon;
    private javax.swing.JPanel detail_panel;
    private javax.swing.JLabel detail_title;
    private javax.swing.JPanel ingredient_mainPanel;
    private javax.swing.JScrollPane ingredient_scrollpane;
    private javax.swing.JLabel ingredient_title;
    private javax.swing.JLabel instructionTitle;
    private javax.swing.JEditorPane instructions_editor;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel notSavedOffline;
    private javax.swing.JButton offlineButton;
    private javax.swing.JButton openBrowser;
    private javax.swing.JPanel procedure_mainPanel;
    // End of variables declaration//GEN-END:variables

}
