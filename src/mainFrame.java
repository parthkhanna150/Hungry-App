
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.swing.JFrame;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author vasu
 */
public class mainFrame extends javax.swing.JFrame {

    /**
     * Creates new form mainFrame
     */
    int h = Toolkit.getDefaultToolkit().getScreenSize().height;
    int w = Toolkit.getDefaultToolkit().getScreenSize().width;

    public mainFrame() {
        initComponents();
        this.setSize(w, h);
        mainPanel.setSize(w,h);
        mainPanel.setPreferredSize(new Dimension(600,5000));
        getContentPane().setBackground(Color.pink);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        searchBt = new javax.swing.JButton();
        searchTf = new javax.swing.JTextField();
        mainScrollPane = new javax.swing.JScrollPane();
        mainPanel = new javax.swing.JPanel();
        favouritesButton = new javax.swing.JButton();
        viewOffline = new javax.swing.JButton();
        searchLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setForeground(new java.awt.Color(204, 51, 0));
        setSize(new java.awt.Dimension(600, 600));
        getContentPane().setLayout(null);

        searchBt.setText("Search");
        searchBt.setMargin(new java.awt.Insets(0, 0, 0, 0));
        searchBt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtActionPerformed(evt);
            }
        });
        getContentPane().add(searchBt);
        searchBt.setBounds(900, 20, 68, 56);

        searchTf.setFont(new java.awt.Font("Lucida Grande", 2, 14)); // NOI18N
        searchTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTfActionPerformed(evt);
            }
        });
        getContentPane().add(searchTf);
        searchTf.setBounds(10, 30, 730, 38);

        mainPanel.setLayout(null);
        mainScrollPane.setViewportView(mainPanel);

        getContentPane().add(mainScrollPane);
        mainScrollPane.setBounds(6, 98, 1240, 540);

        favouritesButton.setText("View favourites");
        favouritesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                favouritesButtonActionPerformed(evt);
            }
        });
        getContentPane().add(favouritesButton);
        favouritesButton.setBounds(970, 50, 140, 29);

        viewOffline.setText("View Offline");
        viewOffline.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOfflineActionPerformed(evt);
            }
        });
        getContentPane().add(viewOffline);
        viewOffline.setBounds(970, 20, 140, 29);

        searchLabel.setFont(new java.awt.Font("Lucida Grande", 3, 14)); // NOI18N
        searchLabel.setForeground(new java.awt.Color(204, 51, 0));
        searchLabel.setText("Search for recipe here:");
        getContentPane().add(searchLabel);
        searchLabel.setBounds(15, 10, 210, 17);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchBtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtActionPerformed
        Recipe job = new Recipe();
        Thread t = new Thread(job);
        t.start();
    }//GEN-LAST:event_searchBtActionPerformed

    private void searchTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTfActionPerformed

    }//GEN-LAST:event_searchTfActionPerformed

    private void favouritesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_favouritesButtonActionPerformed
        // TODO add your handling code here:
        favouritesFrame obj = new favouritesFrame();
    }//GEN-LAST:event_favouritesButtonActionPerformed

    private void viewOfflineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOfflineActionPerformed
        // TODO add your handling code here:
        viewOffline obj = new viewOffline();
    }//GEN-LAST:event_viewOfflineActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(mainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                mainFrame jf = new mainFrame();
                jf.setVisible(true);
            }
        });
    }

    public class Recipe implements Runnable {

        @Override
        public void run() {
            try {
                mainPanel.removeAll();
                String search = searchTf.getText();
                search.replaceAll(" ", "%20");
                URL url = new URL("http://food2fork.com/api/search?key=" + credentials.API_KEY + "&q=" + search);
                URLConnection conn = url.openConnection();
                conn.setRequestProperty("User-Agent", "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.249.0 Safari/532.5");
                BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));
                JSONParser jsonParser = new JSONParser();

                JSONObject jsonObject = (JSONObject) jsonParser.parse(br.readLine());//Full Search Object

                long count = (long) jsonObject.get("count");
//        System.out.println(count);
                singlePanel[] sp = new singlePanel[(int) count];
                JSONArray recipes = (JSONArray) jsonObject.get("recipes");//Object of recipes array[objects]

                int x = 10;
                int y = 10;
                for (int i = 0; i < recipes.size(); i++) {

                    JSONObject recipesObject = (JSONObject) recipes.get(i);
//          JSONObject recipesObject = (JSONObject) jsonParser.parse(recipes[i]);
                    String title = (String) recipesObject.get("title");
                    String image_url = (String) recipesObject.get("image_url");
                    String rId = (String) recipesObject.get("recipe_id");
                    sp[i] = new singlePanel();
                    sp[i].setBounds(x, y, 200, 200);
                    sp[i].lb_title.setText("<html>" + title + "<html>");
                    URL imageUrl = new URL(image_url);
                    URLConnection conn1 = imageUrl.openConnection();
                    conn1.setRequestProperty("User-Agent", "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_5_8; en-US) AppleWebKit/532.5 (KHTML, like Gecko) Chrome/4.0.249.0 Safari/532.5");
                    BufferedImage img = ImageIO.read(conn1.getInputStream());
                    BufferedImage tempJPG = resize(img, 200, 200);
                    sp[i].lb_icon.setIcon(new ImageIcon(tempJPG));

                    sp[i].addMouseListener(new MouseAdapter() {
                        @Override
                        public void mouseClicked(MouseEvent e) {
                            if (e.getClickCount() == 2) {
                                recipeDetail rd = new recipeDetail(title, image_url, rId);
                                rd.setVisible(true);

                            }
                        }
                    });

                    mainPanel.add(sp[i]);
                    repaint();
                    if (x < 800) {
                        x += 240;
                    } else {
                        x = 10;
                        y += 240;
                    }
//            System.out.println(title);  
//            System.out.println(image_url);
//            System.out.println(rId);  

                }
                br.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }

        /**
         *
         * @param image
         * @param width
         * @param height
         * @return
         */
        public BufferedImage resize(BufferedImage image, int width, int height) {
            BufferedImage bi = new BufferedImage(width, height, BufferedImage.TRANSLUCENT);
            Graphics2D g2d = (Graphics2D) bi.createGraphics();
            g2d.addRenderingHints(new RenderingHints(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY));
            g2d.drawImage(image, 0, 0, width, height, null);
            g2d.dispose();
//        System.out.println(bi);
            return bi;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton favouritesButton;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JScrollPane mainScrollPane;
    private javax.swing.JButton searchBt;
    private javax.swing.JLabel searchLabel;
    private javax.swing.JTextField searchTf;
    private javax.swing.JButton viewOffline;
    // End of variables declaration//GEN-END:variables
}
